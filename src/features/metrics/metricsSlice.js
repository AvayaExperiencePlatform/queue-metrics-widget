import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getQueueMetrics } from './metricsAPI';

const initialState = {
  success: false,
  metrics: {},
  loading: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getQueueMetricsThunk = createAsyncThunk('metrics/getQueueMetrics', async ({ queueId, channel, attributes }) => {
  return { queueId, metrics: await getQueueMetrics({ queueId, channel, attributes }) };
  // The value we return becomes the `fulfilled` action payload
});

export const metricsSlice = createSlice({
  name: 'metrics',
  initialState,
  reducers: {
    setMetrics: (state, action) => {
      state.metrics = action.payload;
    },
  },
  // // The `reducers` field lets us define reducers and generate associated actions
  // reducers: {
  //   increment: (state) => {
  //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
  //     // doesn't actually mutate the state because it uses the Immer library,
  //     // which detects changes to a "draft state" and produces a brand new
  //     // immutable state based off those changes
  //     state.value += 1;
  //   },
  //   decrement: (state) => {
  //     state.value -= 1;
  //   },
  //   // Use the PayloadAction type to declare the contents of `action.payload`
  //   incrementByAmount: (state, action) => {
  //     state.value += action.payload;
  //   },
  // },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [getQueueMetricsThunk.fulfilled]: (state, action) => {
      const metrics = JSON.parse(JSON.stringify(state.metrics));
      metrics[action.payload.queueId] = action.payload.metrics.metrics;
      return { ...state, success: true, metrics: metrics, loading: false };
    },
    [getQueueMetricsThunk.pending]: state => {
      return { ...state, success: false, loading: true };
    },
    [getQueueMetricsThunk.rejected]: state => {
      return { ...state, success: false, loading: false };
    },
  },
});

export const { setMetrics } = metricsSlice.actions;

export default metricsSlice.reducer;
