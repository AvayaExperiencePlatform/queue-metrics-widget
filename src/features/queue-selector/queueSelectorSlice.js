import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { listQueues, listAttributes } from './queueSelectorAPI';

const initialState = {
  success: false,
  queues: [],
  attributes: [],
  selectedQueues: [{}],
  selectedAttributes: [],
  channel: undefined,
  loading: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getQueuesThunk = createAsyncThunk('queueSelector/getQueues', async () => {
  const allQueues = [];
  try {
    let currentQueues = await listQueues({ pageNumber: 1, pageSize: 20 });
    allQueues.push(currentQueues.queues);
    const numberOfPagesLeft = Math.floor(currentQueues.pagination.total / currentQueues.pagination.pageSize);
    for await (const i of [...Array(numberOfPagesLeft).keys()]) {
      const currentQueues = await listQueues({
        pageNumber: i + 2,
        pageSize: 20,
      });
      allQueues.push(currentQueues.queues);
    }
  } catch (error) {
    console.error(error);
  }
  return allQueues.flat();
  // The value we return becomes the `fulfilled` action payload
});

export const getAttributesThunk = createAsyncThunk('queueSelector/getAttributes', async () => {
  const allAttributes = [];
  try {
    let categories = await listAttributes({ pageNumber: 1, pageSize: 20 });
    allAttributes.push(categories.categories.map(category => category.attributes).flat());
    const numberOfPagesLeft = Math.floor(categories.pagination.total / categories.pagination.pageSize);
    for await (const i of [...Array(numberOfPagesLeft).keys()]) {
      const categories = await listAttributes({
        pageNumber: i + 2,
        pageSize: 20,
      });
      allAttributes.push(categories.categories.map(category => category.attributes).flat());
    }
  } catch (error) {
    console.error(error);
  }
  return allAttributes.flat();
  // The value we return becomes the `fulfilled` action payload
});

export const queueSelectorSlice = createSlice({
  name: 'queueSelector',
  initialState,
  reducers: {
    setSelectedQueues: (state, action) => {
      state.selectedQueues = action.payload;
    },
    setSelectedAttributes: (state, action) => {
      state.selectedAttributes = action.payload;
    },
    setChannel: (state, action) => {
      state.channel = action.payload;
    },
  },
  // // The `reducers` field lets us define reducers and generate associated actions
  // reducers: {
  //   increment: (state) => {
  //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
  //     // doesn't actually mutate the state because it uses the Immer library,
  //     // which detects changes to a "draft state" and produces a brand new
  //     // immutable state based off those changes
  //     state.value += 1;
  //   },
  //   decrement: (state) => {
  //     state.value -= 1;
  //   },
  //   // Use the PayloadAction type to declare the contents of `action.payload`
  //   incrementByAmount: (state, action) => {
  //     state.value += action.payload;
  //   },
  // },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [getQueuesThunk.fulfilled]: (state, action) => {
      return { ...state, success: true, queues: action.payload, loading: false };
    },
    [getQueuesThunk.pending]: state => {
      return { ...state, success: false, loading: true };
    },
    [getQueuesThunk.rejected]: state => {
      return { ...state, success: false, loading: false, queues: [] };
    },
    [getAttributesThunk.fulfilled]: (state, action) => {
      return { ...state, success: true, attributes: action.payload, loading: false };
    },
    [getAttributesThunk.pending]: state => {
      return { ...state, success: false, loading: true };
    },
    [getAttributesThunk.rejected]: state => {
      return { ...state, success: false, loading: false };
    },
  },
});

export const { setSelectedQueues, setChannel, setSelectedAttributes } = queueSelectorSlice.actions;
export default queueSelectorSlice.reducer;
